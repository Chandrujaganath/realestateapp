/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import chalk = require('chalk');
import { DiffOptions as _DiffOptions_2 } from 'jest-diff';

export declare const _BOLD_WEIGHT: chalk.Chalk;

export declare const _diff: (a: unknown, b: unknown, options?: DiffOptions) => string | null;

export declare type DiffOptions = DiffOptions_2;

export declare const _DIM_COLOR: chalk.Chalk;

/**
 * Ensures that `actual` is of type `number | bigint`
 */
export declare const _ensureActualIsNumber: (
  actual: unknown,
  matcherName: string,
  options?: MatcherHintOptions
) => void;

export declare const _ensureExpectedIsNonNegativeInteger: (
  expected: unknown,
  matcherName: string,
  options?: MatcherHintOptions
) => void;

/**
 * Ensures that `expected` is of type `number | bigint`
 */
export declare const _ensureExpectedIsNumber: (
  expected: unknown,
  matcherName: string,
  options?: MatcherHintOptions
) => void;

export declare const _ensureNoExpected: (
  expected: unknown,
  matcherName: string,
  options?: MatcherHintOptions
) => void;

/**
 * Ensures that `actual` & `expected` are of type `number | bigint`
 */
export declare const _ensureNumbers: (
  actual: unknown,
  expected: unknown,
  matcherName: string,
  options?: MatcherHintOptions
) => void;

export declare const _EXPECTED_COLOR: chalk.Chalk;

export declare const _getLabelPrinter: (...strings: Array<string>) => PrintLabel;

export declare const _highlightTrailingWhitespace: (text: string) => string;

export declare const _INVERTED_COLOR: chalk.Chalk;

export declare const _matcherErrorMessage: (
  hint: string,
  generic: string,
  specific?: string
) => string;

export declare const _matcherHint: (
  matcherName: string,
  received?: string,
  expected?: string,
  options?: MatcherHintOptions
) => string;

declare type MatcherHintColor = (arg: string) => string;

export declare type MatcherHintOptions = {
  comment?: string;
  expectedColor?: MatcherHintColor;
  isDirectExpectCall?: boolean;
  isNot?: boolean;
  promise?: string;
  receivedColor?: MatcherHintColor;
  secondArgument?: string;
  secondArgumentColor?: MatcherHintColor;
};

export declare const _pluralize: (word: string, count: number) => string;

export declare const _printDiffOrStringify: (
  expected: unknown,
  received: unknown,
  expectedLabel: string,
  receivedLabel: string,
  expand: boolean
) => string;

export declare const _printExpected: (value: unknown) => string;

declare type PrintLabel = (string: string) => string;

export declare const _printReceived: (object: unknown) => string;

export declare function printWithType<T>(
  name: string,
  value: T,
  print: (value: T) => string
): string;

export declare const _RECEIVED_COLOR: chalk.Chalk;

export declare function replaceMatchedToAsymmetricMatcher(
  replacedExpected: unknown,
  replacedReceived: unknown,
  expectedCycles: Array<unknown>,
  receivedCycles: Array<unknown>
): {
  replacedExpected: unknown;
  replacedReceived: unknown;
};

export declare const _stringify: (object: unknown, maxDepth?: number, maxWidth?: number) => string;

export declare const _SUGGEST_TO_CONTAIN_EQUAL: string;

export {};
